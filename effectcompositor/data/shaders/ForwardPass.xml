<?xml version="1.0" encoding="UTF-8" ?>
<compositor>
  <shader name="pbr_vs" type="vertex">
    <source>
      <![CDATA[
      #version 330 core
      in vec4 osg_Vertex;
      in vec3 osg_Normal;
      in vec4 osg_Color;
      in vec4 osg_MultiTexCoord0;
      
      out vec2 TexCoords;
      out vec3 TexCoords2;
      out vec3 WorldPos;
      out vec3 WorldNormal;

      uniform mat4 osg_ViewMatrixInverse;
      uniform mat4 osg_ModelViewMatrix;
      uniform mat4 osg_ModelViewProjectionMatrix;
    
      void main()
      {
          TexCoords = osg_MultiTexCoord0.xy;
          
          mat4 worldMatrix = osg_ViewMatrixInverse * osg_ModelViewMatrix;
          WorldPos = (worldMatrix * osg_Vertex).xyz;
          
          mat3 normalMatrix = transpose(inverse(mat3(worldMatrix)));
          WorldNormal = normalMatrix * osg_Normal; 
          
          TexCoords2 = osg_Vertex.xyz;
          
          gl_Position =  osg_ModelViewProjectionMatrix * osg_Vertex;
      }
      ]]>
    </source>
  </shader>

  <shader name="pbr_ps" type="fragment">
    <source>
      <![CDATA[
      #version 330 core
      #pragma import_defines ( NUMBER_LIGHTS ALBEDOMAP NORMALMAP METALLICMAP ROUGHNESSMAP AOMAP IRRADIANCEMAP )
    
      out vec4 FragColor;
      
      in vec3 TexCoords2;
      in vec2 TexCoords;
      in vec3 WorldPos;
      in vec3 WorldNormal;
      
      uniform mat4 osg_ViewMatrixInverse;
      
      #ifdef ALBEDOMAP
      uniform sampler2D albedoMap;
      #endif
      
      #ifdef NORMALMAP
      
      uniform sampler2D normalMap;
      vec3 getNormalFromMap()
      {
          vec3 tangentNormal = texture(normalMap, TexCoords).xyz * 2.0 - 1.0;

          vec3 Q1  = dFdx(WorldPos);
          vec3 Q2  = dFdy(WorldPos);
          vec2 st1 = dFdx(TexCoords);
          vec2 st2 = dFdy(TexCoords);

          vec3 N   = normalize(WorldNormal);
          vec3 T  = normalize(Q1*st2.t - Q2*st1.t);
          vec3 B  = -normalize(cross(N, T));
          mat3 TBN = mat3(T, B, N);

          return normalize(TBN * tangentNormal);
      }
      #endif
      
      #ifdef METALLICMAP
      uniform sampler2D metallicMap;
      #endif
      
      #ifdef ROUGHNESSMAP
      uniform sampler2D roughnessMap;
      #endif
      
      #ifdef AOMAP
      uniform sampler2D aoMap;
      #endif
      
      #ifdef IRRADIANCEMAP
      uniform samplerCube irradianceMap;
      #endif

      #ifdef NUMBER_LIGHTS
        struct Light {
	        vec4 position;
	        vec3 direction;
	        vec3 color;

	        float cutOff;
	        float outerCutOff;

	        float constant;
	        float linear;
	        float quadratic;
        };

        uniform Light Lights[NUMBER_LIGHTS];

        // material parameters
        uniform float metallic;
        uniform float roughness;
        uniform float ao;
        uniform vec3  albedo;

        const float PI = 3.14159265359;
  
        float DistributionGGX(vec3 N, vec3 H, float roughness)
        {
	        float a = roughness * roughness;
	        float a2 = a * a;
	        float NdotH = max(dot(N, H), 0.0);
	        float NdotH2 = NdotH * NdotH;

	        float nom = a2;
	        float denom = (NdotH2 * (a2 - 1.0) + 1.0);
	        denom = PI * denom * denom;

	        return nom / max(denom, 0.001); // prevent divide by zero for roughness=0.0 and NdotH=1.0
        }

        float GeometrySchlickGGX(float NdotV, float roughness)
        {
	        float r = (roughness + 1.0);
	        float k = (r*r) / 8.0;

	        float nom = NdotV;
	        float denom = NdotV * (1.0 - k) + k;

	        return nom / denom;
        }

        float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)
        {
	        float NdotV = max(dot(N, V), 0.0);
	        float NdotL = max(dot(N, L), 0.0);
	        float ggx2 = GeometrySchlickGGX(NdotV, roughness);
	        float ggx1 = GeometrySchlickGGX(NdotL, roughness);

	        return ggx1 * ggx2;
        }

        vec3 fresnelSchlick(float cosTheta, vec3 F0)
        {
	        return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);
        }
        
        vec3 getCameraPosition()
        {
           return vec3(osg_ViewMatrixInverse[3][0], osg_ViewMatrixInverse[3][1], osg_ViewMatrixInverse[3][2]);
        }
        
      #endif // NUMBER_LIGHTS
      
      vec3 getAlbedo()
      {
        #ifdef ALBEDOMAP
          return vec3(pow(texture(albedoMap, TexCoords).rgb, vec3(2.2)));
        #else
          return albedo;
        #endif
      }
      
      vec3 getWorldNormal()
      {
        #ifdef NORMALMAP
          return getNormalFromMap();
        #else
          return WorldNormal;
        #endif
      }
      
      float getRoughness()
      {
        #ifdef ROUGHNESSMAP
          return texture(roughnessMap, TexCoords).r;
        #else
          return roughness;
        #endif
      }
     
      
      float getMetallic()
      {
        #ifdef METALLICMAP
          return texture(metallicMap, TexCoords).r;
        #else
          return metallic;
        #endif
      }
      
      float getAo()
      {
        #ifdef AOMAP
          return texture(aoMap, TexCoords).r;
        #else
          return ao;
        #endif
      }

      void main()
      {		
          vec3  _albedo    = getAlbedo();
          float _roughness = getRoughness();
          float _metallic  = getMetallic();
          float _ao        = getAo();
          
          vec3 camPos = getCameraPosition();
          vec3 N = normalize(getWorldNormal());
          vec3 V = normalize(camPos - WorldPos);

          // calculate reflectance at normal incidence; if dia-electric (like plastic) use F0 
          // of 0.04 and if it's a metal, use the albedo color as F0 (metallic workflow)    
          vec3 F0 = vec3(0.04); 
          F0 = mix(F0, _albedo, _metallic);

          // reflectance equation
          vec3 Lo = vec3(0.0);
          for(int i = 0; i < NUMBER_LIGHTS; ++i) 
          {
              // calculate per-light radiance
              Light light = Lights[i];
              
              vec3 L = normalize(vec3(light.position) - WorldPos);
              vec3 H = normalize(V + L);
              float distance = length(vec3(light.position) - WorldPos);
              float attenuation = 1.0 / (distance * distance);
              
             
              if( light.position.w < 1.0 )
              {
                   attenuation = 1.0;
                   L = normalize(vec3(light.position));
                   H = normalize(V + L);
              }
              
        
              vec3 radiance = light.color * attenuation;

              // Cook-Torrance BRDF
              float NDF = DistributionGGX(N, H, _roughness);   
              float G   = GeometrySmith(N, V, L, _roughness);    
              
              vec3 F    = fresnelSchlick(clamp(dot(H, V), 0.0, 1.0), F0);
              
           
              vec3 nominator    = NDF * G * F; 
              float denominator = 4 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0);
              vec3 specular = nominator / max(denominator, 0.001); // prevent divide by zero for NdotV=0.0 or NdotL=0.0
        
              // kS is equal to Fresnel
              vec3 kS = F;
              // for energy conservation, the diffuse and specular light can't
              // be above 1.0 (unless the surface emits light); to preserve this
              // relationship the diffuse component (kD) should equal 1.0 - kS.
              vec3 kD = vec3(1.0) - kS;
              // multiply kD by the inverse metalness such that only non-metals 
              // have diffuse lighting, or a linear blend if partly metal (pure metals
              // have no diffuse light).
              kD *= 1.0 - _metallic;	  

              // scale light by NdotL
              float NdotL = max(dot(N, L), 0.0);        


              // add to outgoing radiance Lo
              Lo += (kD * _albedo / PI + specular) * radiance * NdotL;  // note that we already multiplied the BRDF by the Fresnel (kS) so we won't multiply by kS again
          }   
    
          // ambient lighting 
          
          #ifdef IRRADIANCEMAP
            vec3 kS = fresnelSchlick(max(dot(N, V), 0.0), F0);
            vec3 kD = 1.0 - kS;
            kD *= 1.0 - _metallic;	  
            vec3 irradiance = texture(irradianceMap, N).rgb;
            vec3 diffuse      = irradiance * _albedo;
            vec3 ambient = (kD * diffuse) * _ao;
          #else
            vec3 ambient = vec3(0.03) * _albedo * _ao;
          #endif
          
          vec3 color = ambient + Lo;
          
          // HDR tonemapping
          color = color / (color + vec3(1.0));
          // gamma correct
          color = pow(color, vec3(1.0/2.2)); 
          
          #ifdef IRRADIANCEMAP
          //vec3 I = normalize(WorldPos - camPos);
          //vec3 R = reflect(I, normalize(WorldNormal));
          //color = texture(irradianceMap, R).rgb;
          
          color = texture(irradianceMap,TexCoords2).rgb;
          #endif

          FragColor = vec4(color, 1.0);
      }
      ]]>
    </source>
  </shader>

  <!-- 
  Material parameters.
  -->

  <technique>
    
    <forward_pass name="PBR_Pass">
      <clear_color>0 0 0 1</clear_color>
      <shader>pbr_vs</shader>
      <shader>pbr_ps</shader>
    </forward_pass>
    
  </technique>

</compositor>
